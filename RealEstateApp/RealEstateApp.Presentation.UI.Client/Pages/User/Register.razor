@page "/register"
@layout MainLayout
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="register-page">
    <div class="register-container">
        <RadzenCard Style="width: 400px; margin: auto; padding: 20px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); border-radius: 10px;">
            <h3 class="text-center">Create an Account</h3>
            <EditForm Model="@registerModel" OnValidSubmit="@RegisterUser" class="form-container">
                <RadzenTextBox @bind-Value="registerModel.Username" Placeholder="Username" Style="margin-bottom: 20px; width: 100%;" />
                <RadzenTextBox @bind-Value="registerModel.FullName" Placeholder="Full Name" Style="margin-bottom: 20px; width: 100%;" />
                <RadzenTextBox @bind-Value="registerModel.Email" Placeholder="Email" Style="margin-bottom: 20px; width: 100%;" />
                <RadzenPassword @bind-Value="registerModel.Password" Placeholder="Password" Style="margin-bottom: 20px; width: 100%;" />
                <RadzenButton Text="Register" Click="@(async () => await RegisterUser())" Style="width: 100%; background-color: #4CAF50; color: white; border: none; border-radius: 5px;" />
            </EditForm>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <RadzenAlert Severity="Error" Summary="Registration Failed" Detail="@errorMessage" />
            }
        </RadzenCard>
    </div>
</div>

<style>
    .register-page {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #f5f5f5;
    }

    .register-container {
        max-width: 400px;
        padding: 20px;
    }

    .text-center {
        text-align: center;
        margin-bottom: 20px;
        color: #333;
    }
</style>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string errorMessage;

    private async Task RegisterUser()
    {
        var response = await Http.PostAsJsonAsync("https://localhost:7044/api/user/register", registerModel);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/login");
        }
        else
        {
            errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error: {errorMessage}");
        }
    }

    public class RegisterModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
        public string Email { get; set; }
        public string FullName { get; set; }
    }
}
